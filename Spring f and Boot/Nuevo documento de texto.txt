--- API REST ---
- CONTROLLER
- RESTCONTROLLER
- @RESQUESMAPPING
- MODEL
- DTO
- API REST
- @MODELATTRIBUTE
- @REQUESTPARAM
- @PATHVARIABLE
- POST
- @VALUE
- CONFIG PROPERTIES
- ENVIROMENT PARA LEER CONFIGURACIONES
- DEPLOY
--- INYECCION DE DEPENDENCIAS ---
- Repositories - services - controllers - models
	Repositories: clases de la base de datos
	Services: clases de logica de negocio
	Controllers: manejador de deploys
	Models: controla las clases de datos
- INMUTABILIDAD CON INTERFAS CLONABLE
- INTERFACES REPOSITORY AND SERVICE
- INYECTAR MEDIANTE ATRIBUTO - @AUTOWIRED /  @COMPONENT
- ANOTACIONES @REPOSITORY AND @SERVICE
- IYECCION DE DEPENDENCIAS MEDIANTE METODO SETTER Y 	CONSTRUCTOR
- ANOTACION @PRIMARY: repositorio por defecto
- ANOTACION @QUALIFIER (@REPOSITORY("nuevoNombre"))
- CONTEXTO REQUESTSCOPE:  puede ser utilizado para temas de autenticación y autorización.
- CONTEXTO SESSIONSCOPE:  creará un único bean para la sessión de HTTP
--- MANEJO DE ERRORES ---
- CONTROLADOR PARA CAPTURAR EXCEPTIONS @RestControllerAdvice: cuando se lanza una excepcion se llama al metodo de este controlador mapeado a esa excepcion en especifico
- METODO HANDLER
- ERROR 404 ( CUANDO NO EXISTE EL API O PAGINA )
- PERSONALIZAR PAGINA DE ERROR NUMBER FORMAT EXCEPTION
- SEPARANDO CAPA DE MANEJO DE ERRORES AL SERVICE
- NULL POINTER
--- INTERCEPTORES HTTP ---
- CARPETA INTERCEPTOR Y CLASE LOADINGTIMEINTERCEPTOR
- AGREGANDO INTERCEPTOR A LA CLASE MvcConfig Y INYECTANDOLA
- IMPLEMENTANDO INTERCEPTOR
- INCLUIR O EXCLUIR RUTAS
- RETORNANDO FALSE EN UN INTERCEPTOR
--- PROGRAMACION ORIENTADA A ASPECTOS ---
- MODULARIZA FUNCIONALIDADES TRANSVERSALES 
*Join Point(Punto de cruce o union): es un punto en la ejecucion del programa
*Advice(Consejo o asesoramiento):Codigo q se ejecuta en un particular punto de union.
*Pointcuts(punto de corte):es una expresion q agrupa uno o mas puntos de union.
*Tipos de Advice: BEFORE ADVICE - AFTER RETURNING ADVICE- AFTER THROWING ADVICE - AROUND ADVICE
- @Aspect
  @Component



- @Aspect
@Component
public class GreetingAspect {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Before("execution(String com.empresa.aop.services.IGreetingService.sayHello(..))")
                                                        //             .*(..)se ejecuta en cualquier metodo de la interfas
                                                    //.*.*(..)se ejecuta en cualquier cualquier clase o interfas dentro del pakage service
                                                //*.*.*(..)se ejecuta en cualquier sub pakage                                                        
    public void loggerBefore( JoinPoint joinPoint ){
        // punto de union entre aspecto y el momento de  la llamada a un metodo
        String method = joinPoint.getSignature().getName();
        String args =  Arrays.toString(joinPoint.getArgs());
        logger.info("Llamada ANTES del metodo "+method+" con los argumentos "+args);
    }
    @After("execution(String com.empresa.aop.services.IGreetingService.sayHello(..))")
    public void loggerAfter( JoinPoint joinPoint ){
        String method = joinPoint.getSignature().getName();
        String args =  Arrays.toString(joinPoint.getArgs());
        logger.info("Llamada DESPUES del metodo "+method+" con los argumentos "+args);
    }
    @AfterReturning("execution(String com.empresa.aop.services.IGreetingService.sayHello(..))")
    public void loggerAfterReturning( JoinPoint joinPoint ){
        String method = joinPoint.getSignature().getName();
        String args =  Arrays.toString(joinPoint.getArgs());
        logger.info("Llamada AfterReturning del metodo "+method+" con los argumentos "+args);
    }
    @AfterReturning("execution(String com.empresa.aop.services.IGreetingService.sayHello(..))")
    public void loggerAfterThrowing( JoinPoint joinPoint ){
        String method = joinPoint.getSignature().getName();
        String args =  Arrays.toString(joinPoint.getArgs());
        logger.info("Llamada AfterThrowing del metodo "+method+" con los argumentos "+args);
    }
    // ENVOLTORIO
    @Around("execution(String com.empresa.aop.services.IGreetingService.sayHello(..))")
    public Object loggerAround( ProceedingJoinPoint joinPoint ){
        String method = joinPoint.getSignature().getName();
        String args =  Arrays.toString(joinPoint.getArgs());
        
        Object result = null;
        try {
            logger.info("El metodo "+method+"() y sus parametros "+args);
            result = joinPoint.proceed();// se ejecuta el metodo
            logger.info("El metodo "+method+"() y sus parametros "+args+" retorna el resultado: "+result);
            
            return result;
        } catch (Throwable e) {
            logger.error("error en la llamada del metodo "+method+" () ");   
        }
        return result;
    }
}


- @Order
- @PointCut
- Clase PointCut para desacoplar codigo

--- HIBERNATE ---
- CLASE @ENTITY
- Repository extends CrudRepository<Person, Long>{}
- DEVOLVIENDO CAMPOS SEPARADOS Y VALORES DEL OBJETO ENTITY
- CONSULTAS PERSONALIZADAS
- CREAR
- UPDATE
- DELETE
- JPQL CAMPOS PERSONALIZADOS
--- EVENTOS CICLO DE VIDA HIBERNATE ---
  PREPERSIS POSTPERSIST
	PREPERSIST
	PREREMOVE
	PREUPDATE
	PREDESTROY
- @EMBEDDED Y @EMBEDDABLE
--- HIBERNATE ASOCIACIONES ---
- LA RELACION MANY TO ONE MUCHOS A UNO
* Creando repositorios para cliente y invoice
* configurando la conexion en el properties  
* ManyToOne
* ManyToOne con relacion existente
* La anotacion @JOINCOLUMN (Personaliza los nombres de la llave foranea)
- LA RELACION ONE TO MANY
* create update 
* mapear a tablas intermedias que ya existen
* eliminar elementos hijos de relaciones
- Relacion ONE TO ONE
* one to one bidireccional
- Relacion ManytoMany











