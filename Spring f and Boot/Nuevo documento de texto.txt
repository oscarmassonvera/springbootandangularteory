--- API REST ---
- CONTROLLER
- RESTCONTROLLER
- @RESQUESMAPPING
- MODEL
- DTO
- API REST
- @MODELATTRIBUTE
- @REQUESTPARAM
- @PATHVARIABLE
- POST
- @VALUE
- CONFIG PROPERTIES
- ENVIROMENT PARA LEER CONFIGURACIONES
- DEPLOY
--- INYECCION DE DEPENDENCIAS ---
- Repositories - services - controllers - models
	Repositories: clases de la base de datos
	Services: clases de logica de negocio
	Controllers: manejador de deploys
	Models: controla las clases de datos
- INMUTABILIDAD CON INTERFAS CLONABLE
- INTERFACES REPOSITORY AND SERVICE
- INYECTAR MEDIANTE ATRIBUTO - @AUTOWIRED /  @COMPONENT
- ANOTACIONES @REPOSITORY AND @SERVICE
- IYECCION DE DEPENDENCIAS MEDIANTE METODO SETTER Y 	CONSTRUCTOR
- ANOTACION @PRIMARY: repositorio por defecto
- ANOTACION @QUALIFIER (@REPOSITORY("nuevoNombre"))
- CONTEXTO REQUESTSCOPE:  puede ser utilizado para temas de autenticación y autorización.
- CONTEXTO SESSIONSCOPE:  creará un único bean para la sessión de HTTP
--- MANEJO DE ERRORES ---
- CONTROLADOR PARA CAPTURAR EXCEPTIONS @RestControllerAdvice: cuando se lanza una excepcion se llama al metodo de este controlador mapeado a esa excepcion en especifico
- METODO HANDLER
- ERROR 404 ( CUANDO NO EXISTE EL API O PAGINA )
- PERSONALIZAR PAGINA DE ERROR NUMBER FORMAT EXCEPTION
- SEPARANDO CAPA DE MANEJO DE ERRORES AL SERVICE
- NULL POINTER
--- INTERCEPTORES HTTP ---
- CARPETA INTERCEPTOR Y CLASE LOADINGTIMEINTERCEPTOR
- AGREGANDO INTERCEPTOR A LA CLASE MvcConfig Y INYECTANDOLA
- IMPLEMENTANDO INTERCEPTOR
- INCLUIR O EXCLUIR RUTAS
- RETORNANDO FALSE EN UN INTERCEPTOR
--- PROGRAMACION ORIENTADA A ASPECTOS ---








